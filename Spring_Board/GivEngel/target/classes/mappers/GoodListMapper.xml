<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="GoodDAO">
<!-- ********************** -->
<!-- 김민주 -->
<!-- 상품리스트페이지 전체 상품리스트(카테고리별 분류) -->
	<select id='getGoodList' resultType="goodVO" parameterType="searchCriteriaGood">
		<![CDATA[
		SELECT * FROM  
		good
		]]>
		WHERE good_no >= 0
		<include refid="search"></include>
		<![CDATA[
		ORDER BY good_date DESC
		LIMIT #{pageStart}, #{perPageNum}
		]]>
		
	</select>
	
	<!-- 전체 리스트 카운트 -->
	<select id="getGoodListCnt" resultType="int" parameterType="searchCriteriaGood">
		SELECT 
		count(*) as listCnt
		FROM 
		good
		where good_no >=0
		<include refid="search"></include>
	</select>
	
	
	
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 'n'.toString()">
				AND good_tag LIKE CONCAT('%',#{keyword},'%') OR good_name LIKE CONCAT('%',#{keyword},'%') OR good_detail LIKE CONCAT('%',#{keyword},'%')
			</if>			
			<if test="searchType == 'good_name'.toString()">
				AND good_name LIKE CONCAT('%',#{keyword},'%')
			</if>			
			<if test="searchType == 'good_tag'.toString()">
				AND good_tag LIKE CONCAT('%', #{keyword}, '%')
			</if>			
			<if test="searchType == 'good_detail'.toString()">
				AND good_detail LIKE CONCAT('%',#{keyword},'%')
			</if>			
		</if>
			<if test='categories != null and categories != "" '>
				AND good_tag LIKE CONCAT('%', #{categories}, '%')
			</if>
			<if test='color != null and color != "" '>
				AND good_tag LIKE CONCAT('%', #{color}, '%')
			</if>
			<if test='spon_no != null and spon_no != "" '>
				AND spon_no = ${spon_no}
			</if>
	</sql>
	
	
	
	<!-- 인기상품  고정!(찜순) -->
	<select id='getPopularGoodList' resultType="goodVO" parameterType="searchCriteriaGood">
		SELECT 
		*
		FROM good   
		<include refid="search"></include>
		ORDER BY good_like DESC LIMIT 0,9
	</select>
	
	<!-- 최신상품  date 순 -->
	<select id='getlatestGood1' resultType="goodVO">
		SELECT 
		*
		FROM good 
		ORDER BY good_date DESC
	</select>

	
	

	
	<!-- 판매량 순 추천상품 고정! -->
	<select id="rankingGood" resultType="goodVO">
	SELECT good_no, good_name,good_img, good_tag,good_price  FROM
	(SELECT count(user_buylog.good_no) countbuy, good.good_no, good.good_name,good.good_img,good.good_tag,good.good_price
	FROM user_buylog 
	INNER JOIN good 
	ON user_buylog.good_no = good.good_no 	
	GROUP BY user_buylog.good_no
	ORDER BY countbuy DESC) AS GOOD;
	</select>
	
	<!-- 댓글 순 추천상품 고정 -->
	<select id="goodComRanking" resultType="hashmap">
	SELECT good.good_no,good.good_name,good.good_price,good.good_img, IFNULL(cnt,0)
	FROM good LEFT JOIN (select good_no,count(*) as cnt FROM good_com group by good_no) AS tb 
	ON good.good_no= tb.good_no
	GROUP BY good_no ORDER BY cnt DESC;
	</select>
	
	


	<!-- 상품디테일 -->
	<select id="getGoodView" parameterType="goodVO" resultType="goodVO">
		SELECT * FROM good WHERE good_no = ${good_no}
	</select>
	
	
	
	
	<!-- 로그인 여부 확인 -->
	<select id="loginCheckCom" parameterType="userVO" resultType="userVO">
		SELECT user_pw 
		FROM user
		WHERE user_no=${user_no}
	</select>
	
	<!-- 댓글 리스트 -->
	<select id="listGoodCom" parameterType="good_comVO" resultType="good_comVO">
		SELECT * FROM good_com WHERE good_no = ${good_no}
	</select>
	
	<!-- 총 댓글 수 -->
	<select id="totalGoodCom" parameterType="good_comVO" resultType="int">
		SELECT COUNT(*) FROM good_com WHERE good_no = ${good_no}
	</select>
	
	<!-- 댓글 입력 -->
	<insert id="addGoodCom" parameterType="good_comVO">
		INSERT INTO 
		good_com(good_no,good_com_writer,good_com_date,good_com_content)
		VALUES(#{good_no},#{good_com_writer},sysdate(),#{good_com_content})
	</insert>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteGoodCom" parameterType="good_comVO">
		DELETE FROM good_com
		WHERE good_com_no = ${good_com_no} AND good_com_writer = #{good_com_writer}
	</delete>
	
	<!-- 댓글 수정 -->
	<update id="modifyGoodCom" parameterType="good_comVO">
		UPDATE good_com 
		SET good_com_content = #{good_com_content} 
		where good_com_no = ${good_com_no} AND good_com_writer = #{good_com_writer};
	</update>
	
	
	
	
	
	<!-- 구매 관련 mapper -->
	<!-- 유저 구매 로그 저장 -->
	<insert id="addUserBuyLog" parameterType="user_buylogVO">
		INSERT INTO
		user_buylog(user_no, good_no, user_buylog_price, user_buylog_date)
		VALUES(#{user_no},#{good_no},#{user_buylog_price},sysdate())
	</insert>
	
	<!-- 유저 마일리지 적립 -->
	<update id="addUserM" parameterType="hashmap" >
		UPDATE user SET 
		user_cash = user_cash+(${buy_totalPrice*0.1}),       
		user_bought = CONCAT(user_bought,'${good_no}#') where user_no = ${user_no};
	</update>
	
	<!-- 유저 마일리지 로그 업데이트 -->
	<insert id="addUserMLog" parameterType="user_cashlogVO">
		INSERT INTO user_cashlog(user_no,user_cashlog_log,user_cashlog_price,user_cashlog_date)
		VALUES(${user_no},#{user_cashlog_log},${user_cashlog_price * 0.1},sysdate())
	</insert>
	
	<!-- 상품 재고 업데이트 -->
	<update id="countGoodStock" parameterType="goodVO">
		UPDATE good SET good_stock = good_stock - ${good_stock} WHERE good_no = ${good_no}
	</update>
	
	
	
	
	
	
	<!-- 장바구니 중복 확인 -->
	<select id="checkCart" parameterType="cartVO" resultType="cartVO">
		select user_no,good_no,cart_count from cart	WHERE user_no = ${user_no} AND good_no = ${good_no} 
	</select>
	
	<!-- 장바구니 추가 -->
	<insert id="addCart" parameterType="cartVO">
		INSERT INTO cart(user_no,good_no,cart_count)
		VALUES(${user_no},${good_no},${cart_count})
	</insert>
	


</mapper>